type: install
name: Async Geo Replication
id: async-geo-replication
baseUrl: https://raw.githubusercontent.com/sych74/async-geo-replica/main

settings:
  fields:
    - caption: Regions
      type: regionlist
      name: regions
      disableInactive: true
      selectFirstAvailable: true
      multiSelect: true
      min: 1
      max: 5
      filter:
        isActive: true
      tooltip: <h3>Select destination regions.</h3> The first region selected should have the highest performance. It will host a master cluster.

    - caption: Environment
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: false
      required: true

globals:
  db_user: jelastic-${fn.random}
  db_pass: ${fn.password(10)}
  repl_user: replica-${fn.random}
  repl_pass: ${fn.password(10)}
  monitor_user: monitor-${fn.random}
  monitor_pass: ${fn.password(10)}

onInstall:
  - initGlobals
  - createEnvs

actions:
  initGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','),
            envGroups = eval('(' + MANIFEST + ')').envGroups, index,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals,
            resp, domain;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i])
                glbs["domain-" + index] = resp[a].domain;
            }
          }
          if (index == 1) {
            glbs["displayName-" + index] = "WP Cluster Master";
            glbs["initial_env_master-" + index] = "true";
          } else {
            glbs["displayName-" + index] = "WP Cluster Slave " + i;
            glbs["initial_env_master-" + index] = "false";
          }
        }
        glbs["envGroups"] = envGroups;
        glbs["regionsCount"] = regions.length;
        glbs["master_env_name"] = "${settings.envName}-1";
        return { result: 0, onAfterReturn: onAfterReturn };

  createEnvs:
    - script: |
        var regions = '${settings.regions}'.split(','), actions = [];
        var envGroups = eval('(' + MANIFEST + ')').envGroups;
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "${baseUrl}/topology.jps?_r=${fn.random}",
            envName: "${settings.envName}-" + cluster,
            loggerName: "${settings.envName}-" + cluster,
            envGroups: envGroups,
            displayName: "${globals.displayName-" + cluster + "}",
            region: "${globals.region-" + cluster + "}",
          });
        }
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

