jpsType: update
id: async-geo-replication-manager
name: Async Geo Replication Manager
description: Async Geo Replication Manager
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-multiregions/master

globals:
  db_user: ${settings.db_user}
  db_pass: ${settings.db_pass}
  cluster_name: env-8608450

onInstall:
  - getClusterEnvs
  - getMasterNodesAddress

actions:
  getClusterEnvs:
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${env.name}
    - setGlobals:
        nextIndex: ${response.nextIndex}
        clusterEnvs: ${response.items.join(,)}

  importGlobalsFromNodeGroup:
    - script: |
        var resp = api.env.control.GetNodeGroups("${env.name}", session);
        if (resp.result != 0) return resp;
        var groups = resp.object, globals;
        for (var i = 0, n = groups.length; i < n; i++)
          if (groups[i].name == "${this}" && groups[i].globals) {
            globals = new org.yaml.snakeyaml.Yaml().load(groups[i].globals);
            break;
          }
        return { result: 0, onAfterReturn: { setGlobals: globals } };

  getMasterNodesAddress:
    - script: |
        var onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals;
        var resp = api.env.control.GetNodeGroups("${globals.cluster_name}-1", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["db_master-1"] = k[i].address : 0;
        }
        var resp = api.env.control.GetNodeGroups("${globals.cluster_name}-2", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["db_master-2"] = k[i].address : 0;
        }
        return { result: 0, onAfterReturn: { setGlobals: globals } };


