jpsType: update
id: async-geo-replication
name: Async Geo Replication
description: Async Geo Replication
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-multiregions/master

globals:
  master: true
  pre_install: false
  post_install: true
  db_user: test
  db_pass: abcABC123
  repl_user: repl
  repl_pass: abcABC123
  cluster_name: env-4594602
  db_cluster_url: https://raw.githubusercontent.com/sych74/mysql-cluster/v2.4.0
  

onInstall:
  - if ('${globals.pre_install}' == 'true'):
    - if ('${globals.master}' == 'true'):
      - if ('${env.envName}' == '${globals.cluster_name}-1'):
        - masterConfiguration:
            increment: 1
      - else:
        - masterConfiguration:
            increment: 2
    - else:
      - slaveConfiguration
    - setupMainUser
    - setupReplicaUser
  - if ('${globals.post_install}' == 'true'):
    - getMastersIPs
    - if ('${globals.master}' == 'true'):
      - if ('${env.envName}' == '${globals.cluster_name}-1'):
        - setupMaterReplication:
            master: ${globals.master2_ip}
      - else:
        - setupMaterReplication:
            master: ${globals.master1_ip}

actions:
  setupMainUser:
    cmd[sqldb]: |-
      wget ${globals.db_cluster_url}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.db_user} ${globals.db_pass} &>> /var/log/run.log
    user: root

  setupReplicaUser:
    cmd[sqldb]: |-
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "CREATE USER '${globals.repl_user}'@'%' IDENTIFIED BY '${globals.repl_pass}';";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "GRANT REPLICATION CLIENT,REPLICATION SLAVE ON *.* TO '${globals.repl_user}'@'%'; FLUSH PRIVILEGES;";
      
  masterConfiguration:
    cmd[sqldb]: |-
        wget ${globals.db_cluster_url}/configs/gtidMaster.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this.increment}/" /etc/mysql/conf.d/master.cnf

  slaveConfiguration:
    cmd[sqldb]: |-
        wget ${globals.db_cluster_url}/configs/gtidSlave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf

  setupMaterReplication:
    cmd[sqldb]: |-
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "CHANGE MASTER TO MASTER_HOST = '${this.master}', MASTER_USER = '${globals.repl_user}', MASTER_PASSWORD = '${globals.repl_pass}',  MASTER_AUTO_POSITION = 1;";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "START SLAVE;";

  getMastersIPs:
     - script: |
        var onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals;
        var resp = jelastic.env.control.GetEnvInfo("${globals.cluster_name}-1", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["master1_ip"] = k[i].address : 0;
        }
        var resp = jelastic.env.control.GetEnvInfo("${globals.cluster_name}-2", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["master2_ip"] = k[i].address : 0;
        }
        return { result: 0, onAfterReturn: onAfterReturn };
    
  setupUser:
    cmd[${this.id}]: |-
      wget ${globals.PATH}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.DB_USER} ${globals.DB_PASS} &>> /var/log/run.log
    user: root

  setupMaster:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/master.cnf
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this.increment}/" /etc/mysql/conf.d/master.cnf
  
  addSlaves:
    - forEach(n:nodes.sqldb):
        addNewSlave: ${@n.id}
  
  addNewSlave:
    - if (('${this}' != '${globals.master1_id}') && ('${this}' != '${globals.master2_id}')):
        - setupSlave:
            id: ${this}
        - setupReplication:
            id: ${this}
            masterId: "${globals.master_id_for_new_slave}"
        - setMasterForNewSlave

  reconfigureReplication:
    cmd[${this.id}]: |-
      rm -f /var/lib/mysql/auto.cnf;
      sed -i "s/report_host.*/report_host = node${this.id}/" ${this.config};
      sed -i "s/server-id.*/server-id = ${this.id}/" ${this.config};
      mysqlreplicate --master=${globals.DB_USER}:${globals.DB_PASS}@node${this.master_id}:3306 --slave=${globals.DB_USER}:${globals.DB_PASS}@node${this.id}:3306 --rpl-user=${globals.REPLICATION_USER}:${globals.REPLICATION_PASS}
      sudo /etc/init.d/mysql restart;

  reconfigureMasters:
    - reconfigureReplication:
        id: "${globals.master1_id}"
        master_id: "${globals.master2_id}"
        config: "/etc/mysql/conf.d/master.cnf"
    - reconfigureReplication:
        id: "${globals.master2_id}"
        master_id: "${globals.master1_id}"
        config: "/etc/mysql/conf.d/master.cnf"
    
  reconfigureSlave:  
    - if (('${this}' != '${globals.master1_id}') && ('${this}' != '${globals.master2_id}')):
      - reconfigureReplication:
          id: ${this}
          master_id: "${globals.master_id_for_new_slave}"
          config: "/etc/mysql/conf.d/slave.cnf"
  
