jpsType: update
id: async-geo-replication
name: Async Geo Replication
description: Async Geo Replication
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-multiregions/master

globals:
  master: false
  pre_install: false
  post_install: true
  db_user: test
  db_pass: abcABC123
  repl_user: repl
  repl_pass: abcABC123
  cluster_name: env-4594602
  db_cluster_url: https://raw.githubusercontent.com/sych74/mysql-cluster/v2.4.0
  

onInstall:
  - if ('${globals.pre_install}' == 'true'):
    - if ('${globals.master}' == 'true'):
      - if ('${env.envName}' == '${globals.cluster_name}-1'):
        - masterConfiguration:
            increment: 1
      - else:
        - masterConfiguration:
            increment: 2
    - else:
      - slaveConfiguration
    - setupMainUser
    - setupReplicaUser
  - if ('${globals.post_install}' == 'true'):
    - getMastersIPs
    - if ('${globals.master}' == 'true'):
      - if ('${env.envName}' == '${globals.cluster_name}-1'):
        - setupMaterReplication:
            master: ${globals.master2_ip}
      - else:
        - setupMaterReplication:
            master: ${globals.master1_ip}
    - else:
        - setupSlaveReplication

actions:
  setupMainUser:
    cmd[sqldb]: |-
      wget ${globals.db_cluster_url}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.db_user} ${globals.db_pass} &>> /var/log/run.log
    user: root

  setupReplicaUser:
    cmd[sqldb]: |-
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "CREATE USER '${globals.repl_user}'@'%' IDENTIFIED BY '${globals.repl_pass}';";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "GRANT REPLICATION CLIENT,REPLICATION SLAVE ON *.* TO '${globals.repl_user}'@'%'; FLUSH PRIVILEGES;";
      
  masterConfiguration:
    cmd[sqldb]: |-
        wget ${globals.db_cluster_url}/configs/gtidMaster.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this.increment}/" /etc/mysql/conf.d/master.cnf

  slaveConfiguration:
    cmd[sqldb]: |-
        wget ${globals.db_cluster_url}/configs/gtidSlave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf

  setupMaterReplication:
    cmd[sqldb]: |-
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "CHANGE MASTER TO MASTER_HOST = '${this.master}', MASTER_USER = '${globals.repl_user}', MASTER_PASSWORD = '${globals.repl_pass}',  MASTER_AUTO_POSITION = 1;";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "START SLAVE;";

  setupSlaveReplication:
    cmd[sqldb]: |-
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "SELECT asynchronous_connection_failover_add_source('ch1', '${globals.master1_ip}', 3306, '', 100);";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "SELECT asynchronous_connection_failover_add_source('ch1', '${globals.master2_ip}', 3306, '', 10);";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "CHANGE MASTER TO SOURCE_CONNECTION_AUTO_FAILOVER=1 FOR CHANNEL 'ch1';";
      MYSQL_PWD=${globals.db_pass} mysql -u${globals.db_user} -e "START REPLICA FOR CHANNEL 'ch1';";

  getMastersIPs:
     - script: |
        var onAfterReturn = { setGlobals: {} },
            glbs = onAfterReturn.setGlobals;
        var resp = jelastic.env.control.GetEnvInfo("${globals.cluster_name}-1", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["master1_ip"] = k[i].address : 0;
        }
        var resp = jelastic.env.control.GetEnvInfo("${globals.cluster_name}-2", session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb')
              k[i].ismaster ? glbs["master2_ip"] = k[i].address : 0;
        }
        return { result: 0, onAfterReturn: onAfterReturn };
    
